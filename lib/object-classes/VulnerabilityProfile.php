<?php


/**
 * @property $_ip4Map IP4Map cached ip start and end value for fast optimization
 */
class VulnerabilityProfile extends SecurityProfile2
{
    use ReferenceableObject;
    use PathableName;
    use XmlConvertible;
    use ObjectWithDescription;

    /** @var string|null */
    protected $value;

    public $_all;

    /** @var SecurityProfileStore|null */
    public $owner;

    public $secprof_type;

    public $threatException = array();
    public $rules_obj = array();
    public $additional = array();

    public $cloud_inline_analysis_enabled = false;

    public $tmp_VP_prof_array = array(
        "SQL Injection",
        "Command Injection"
    );

    /**
     * you should not need this one for normal use
     * @param string $name
     * @param SecurityProfileStore $owner
     * @param bool $fromXmlTemplate
     */
    function __construct($name, $owner, $fromXmlTemplate = FALSE)
    {
        $this->owner = $owner;

        if( $fromXmlTemplate )
        {
            $doc = new DOMDocument();
            $doc->loadXML(self::$templatexml, XML_PARSE_BIG_LINES);

            $node = DH::findFirstElementOrDie('entry', $doc);

            $rootDoc = $owner->xmlroot->ownerDocument;
            #$rootDoc = $this->owner->securityProfileRoot->ownerDocument;

            $this->xmlroot = $rootDoc->importNode($node, TRUE);
            $this->load_from_domxml($this->xmlroot);

            $this->name = $name;
            $this->xmlroot->setAttribute('name', $name);
        }

        $this->name = $name;
    }

    /**
     * @param string $newName
     * @return bool
     */
    public function setName($newName)
    {
        $ret = $this->setRefName($newName);

        if( $this->xmlroot === null )
            return $ret;

        $this->xmlroot->setAttribute('name', $newName);

        return $ret;
    }

    /**
     * @param string $newName
     */
    public function API_setName($newName)
    {
        $c = findConnectorOrDie($this);
        $xpath = $this->getXPath();

        $this->setName($newName);

        if( $c->isAPI())
            $c->sendRenameRequest($xpath, $newName);
    }

    /**
     * @param DOMElement $xml
     * @return bool TRUE if loaded ok, FALSE if not
     * @ignore
     */
    public function load_from_domxml(DOMElement $xml)
    {
        $this->secprof_type = "vulnerability";
        $this->xmlroot = $xml;

        $this->name = DH::findAttribute('name', $xml);
        if( $this->name === FALSE )
            derr("Vulnerability SecurityProfile name not found\n");


        $tmp_rule = DH::findFirstElement('rules', $xml);
        if( $tmp_rule !== FALSE )
        {
            $tmp_array[$this->secprof_type][$this->name]['rules'] = array();
            foreach( $tmp_rule->childNodes as $tmp_entry1 )
            {
                if( $tmp_entry1->nodeType != XML_ELEMENT_NODE )
                    continue;

                $rule_name = DH::findAttribute('name', $tmp_entry1);
                if( $rule_name === FALSE )
                    derr("VB severity name not found\n");


                $threadPolicy_obj = new ThreatPolicyVulnerability( $rule_name, $this );
                $threadPolicy_obj->vulnerabilitypolicy_load_from_domxml( $tmp_entry1 );
                $this->rules_obj[] = $threadPolicy_obj;
                $threadPolicy_obj->addReference( $this );

                $this->owner->owner->ThreatPolicyStore->add($threadPolicy_obj);
            }
        }

        $tmp_threat_exception = DH::findFirstElement('threat-exception', $xml);
        if( $tmp_threat_exception !== FALSE )
        {
            $tmp_array[$this->secprof_type][$this->name]['threat-exception'] = array();
            foreach( $tmp_threat_exception->childNodes as $tmp_entry1 )
            {
                if( $tmp_entry1->nodeType != XML_ELEMENT_NODE )
                    continue;

                /*
                 <threat-exception>
                  <entry name="58072">
                   <action>
                    <default/>
                   </action>
                   <exempt-ip>
                    <entry name="1.2.3.4"/>
                   </exempt-ip>
                  </entry>
                 </threat-exception>
                 */
                $tmp_name = DH::findAttribute('name', $tmp_entry1);
                if( $tmp_name === FALSE )
                    derr("VB severity name not found\n");

                $this->threatException[$tmp_name]['name'] = $tmp_name;


                if( get_class($this->owner->owner) == "DeviceGroup" )
                    $threatStore = $this->owner->owner->owner->threatStore;
                else
                    $threatStore = $this->owner->owner->threatStore;

                $threat_obj = $threatStore->find($tmp_name);
                if($threat_obj !== null)
                    $threat_obj->addReference($this);


                $action = DH::findFirstElement('action', $tmp_entry1);
                if( $action !== FALSE )
                {
                    $tmp_action = DH::firstChildElement($action);
                    $tmp_array[$this->secprof_type][$this->name]['threat-exception'][$tmp_name]['action'] = $tmp_action->nodeName;
                    $this->threatException[$tmp_name]['action'] = $tmp_action->nodeName;
                    if($threat_obj !== null)
                        $this->threatException[$tmp_name]['default-action'] = $threat_obj->defaultAction();
                }

                $exemptIP = DH::findFirstElement('exempt-ip', $tmp_entry1);
                $this->threatException[$tmp_name]['exempt-ip'] = array();
                if( $exemptIP !== FALSE )
                {
                    foreach( $exemptIP->childNodes as $tmp_entry2 )
                    {
                        if ($tmp_entry2->nodeType != XML_ELEMENT_NODE)
                            continue;

                        $this->threatException[$tmp_name]['exempt-ip'][] = DH::findAttribute("name", $tmp_entry2);
                    }
                }
            }
        }


        $tmp_rule = DH::findFirstElement('mica-engine-vulnerability-enabled', $xml);
        if( $tmp_rule !== FALSE && !$tmp_rule->hasChildNodes() )
        {
            $xml->removeChild($tmp_rule);
            $tmp_rule = DH::findFirstElement('mica-engine-vulnerability-enabled', $xml);
        }

        if( $tmp_rule === FALSE )
        {
            //Todo: validate what is default inline_policy_action
            $tmp_inline_policy_action = "alert";
            $xmlstring = '<mica-engine-vulnerability-enabled>
      <entry name="SQL Injection">
         <inline-policy-action>'.$tmp_inline_policy_action.'</inline-policy-action>
      </entry>
      <entry name="Command Injection">
         <inline-policy-action>'.$tmp_inline_policy_action.'</inline-policy-action>
      </entry>
   </mica-engine-vulnerability-enabled>';

            if( $this->owner->owner->version >= 110 )
            {
                $xmlElement = DH::importXmlStringOrDie($this->xmlroot->ownerDocument, $xmlstring);
                $xml->appendChild($xmlElement);

                $tmp_rule = DH::findFirstElement('mica-engine-vulnerability-enabled', $xml);
            }
        }

        if( $tmp_rule !== FALSE )
        {
            $this->additional['mica-engine-vulnerability-enabled'] = array();
            foreach( $tmp_rule->childNodes as $tmp_entry1 )
            {
                if ($tmp_entry1->nodeType != XML_ELEMENT_NODE)
                    continue;

                $name = DH::findAttribute("name", $tmp_entry1);
                $this->additional['mica-engine-vulnerability-enabled'][$name]['inline-policy-action'] = DH::findFirstElement("inline-policy-action", $tmp_entry1)->textContent;
            }


            foreach( $this->tmp_VP_prof_array as $inline_policy_name )
            {
                if( !isset( $this->additional['mica-engine-vulnerability-enabled'][$inline_policy_name] ) )
                {
                    //Todo: validate what is default inline_policy_action
                    $tmp_inline_policy_action = "alert";
                    $tmp_xml_string = '<entry name="'.$inline_policy_name.'">
                           <inline-policy-action>'.$tmp_inline_policy_action.'</inline-policy-action>
                        </entry>';


                    $xmlElement = DH::importXmlStringOrDie($this->xmlroot->ownerDocument, $tmp_xml_string);
                    $tmp_rule->appendChild($xmlElement);

                    $this->additional['mica-engine-vulnerability-enabled'][$inline_policy_name]['inline-policy-action'] = $tmp_inline_policy_action;
                }
            }
        }

        //<cloud-inline-analysis>yes</cloud-inline-analysis>
        $tmp_rule = DH::findFirstElement('cloud-inline-analysis', $xml);

        if( $tmp_rule === FALSE )
        {
            $tmp_rule = DH::findFirstElementOrCreate('cloud-inline-analysis', $xml);

            //Todo: validate what is default value here if not available
            $tmp_rule->textContent = "no";
            $this->cloud_inline_analysis_enabled = false;
        }

        if( $tmp_rule !== FALSE )
        {
            if( $tmp_rule->textContent == "yes")
                $this->cloud_inline_analysis_enabled = true;
        }

        return TRUE;
    }

    public function display()
    {
        PH::print_stdout(  "     * " . get_class($this) . " '" . $this->name() . "'    " );
        PH::$JSON_TMP['sub']['object'][$this->name()]['name'] = $this->name();
        PH::$JSON_TMP['sub']['object'][$this->name()]['type'] = get_class($this);
        //Todo: continue for PH::print_stdout( ); out

        #PH::print_stdout();

        if( !empty( $this->rules_obj ) )
        {
            PH::print_stdout("        - threat-rules:");

            foreach ($this->rules_obj as $rulename => $rule)
            {
                $rule->display();
            }
        }

        if( !empty( $this->threatException ) )
        {
            PH::print_stdout("        - threat-exception:" );

            foreach( $this->threatException as $threatname => $threat )
            {
                PH::$JSON_TMP['sub']['object'][$this->name()]['threat-exception'][$threatname]['name'] = $threat['name'];

                $string = "             '" . $threat['name'] . "'";
                if( isset( $threat['action'] ) )
                {
                    $string .= "  - action: ".$threat['action'];
                    PH::$JSON_TMP['sub']['object'][$this->name()]['threat-exception'][$threatname]['action'] = $threat['action'];
                }
                if( isset( $threat['default-action'] ) )
                {
                    $string .= "  - default-action : '".$threat['default-action']."'";
                    PH::$JSON_TMP['sub']['object'][$this->name()]['threat-exception'][$threatname]['default-action'] = $threat['default-action'];
                }
                if( isset( $threat['exempt-ip'] ) )
                {
                    $string .= "  - exempt-ip: ".implode( ",", $threat['exempt-ip'] );
                    PH::$JSON_TMP['sub']['object'][$this->name()]['threat-exception'][$threatname]['exempt-ip'] = $threat['exempt-ip'];
                }

                PH::print_stdout(  $string );
            }
        }

        if( !empty( $this->additional ) )
        {
            if( !empty( $this->additional['mica-engine-vulnerability-enabled'] ) )
            {
                PH::print_stdout("        ----------------------------------------");
                $enabled = "[no]";
                if( $this->cloud_inline_analysis_enabled )
                    $enabled = "[yes]";
                PH::print_stdout("        - mica-engine-vulnerability-enabled: ". $enabled);

                foreach ($this->additional['mica-engine-vulnerability-enabled'] as $name => $threat)
                    PH::print_stdout("          * " . $name . " - inline-policy-action :" . $this->additional['mica-engine-vulnerability-enabled'][$name]['inline-policy-action']);
            }
        }

    }


    public function vulnerability_rules_best_practice()
    {
        $bp_set = null;
        if (!empty($this->rules_obj)) {
            $bp_set = false;
            foreach ($this->rules_obj as $rulename => $threatpolicy) {
                /** @var ThreatPolicyVulnerability $threatpolicy */
                if ($threatpolicy->vulnerability_rule_best_practice())
                    $bp_set = true;
                else
                    return false;
            }
        }
        return $bp_set;
    }

    public function vulnerability_rules_visibility()
    {
        $bp_set = null;
        if (!empty($this->rules_obj)) {
            $bp_set = false;
            foreach ($this->rules_obj as $rulename => $threatpolicy) {
                /** @var ThreatPolicyVulnerability $threatpolicy */
                if ($threatpolicy->vulnerability_rule_visibility())
                    $bp_set = true;
                else
                    return false;
            }
        }
        return $bp_set;
    }

    //todo: 20241107 swaschkut - bring in BP
    public function vulnerability_exception_best_practice()
    {
        if (!empty($this->threatException)) {
            foreach ($this->threatException as $threatname => $threat) {
                //which check??
            }
        }

        derr( "BP VB exception check not impemented" );
    }

    public function is_best_practice()
    {
        if( $this->owner->owner->version >= 110 )
        {
            if ($this->vulnerability_rules_best_practice() && $this->cloud_inline_analysis_best_practice($this->owner->bp_json_file)
                #&& $this->vulnerability_exception_best_practice()
            )
                return TRUE;
            else
                return FALSE;
        }
        else
        {
            if ($this->vulnerability_rules_best_practice()
                #&& $this->vulnerability_exception_best_practice()
            )
                return TRUE;
            else
                return FALSE;
        }
    }

    public function is_visibility()
    {
        if( $this->owner->owner->version >= 110 )
        {
            if ($this->vulnerability_rules_visibility() && $this->cloud_inline_analysis_visibility($this->owner->bp_json_file)
            )
                return TRUE;
            else
                return FALSE;
        }
        else
        {
            if ($this->vulnerability_rules_visibility()
            )
                return TRUE;
            else
                return FALSE;
        }
    }

    static $templatexml = '<entry name="**temporarynamechangeme**"></entry>';

    static $templatexml_100 = '<entry name="**temporarynamechangeme**">
   <mica-engine-vulnerability-enabled>
      <entry name="SQL Injection">
         <inline-policy-action>alert</inline-policy-action>
      </entry>
      <entry name="Command Injection">
         <inline-policy-action>alert</inline-policy-action>
      </entry>
   </mica-engine-vulnerability-enabled>
</entry>';
    
}

